// // Example IDL file for our monster's schema.
//
// namespace MyGame.Sample;
//
// enum Color:byte { Red = 0, Green, Blue = 2 }
//
// union Equipment { Weapon } // Optionally add more tables.
//
// struct Vec3 {
//   x:float;
//   y:float;
//   z:float;
// }
//
// table Monster {
//   pos:Vec3; // Struct.
//   mana:short = 150;
//   hp:short = 100;
//   name:string;
//   friendly:bool = false (deprecated);
//   inventory:[ubyte];  // Vector of scalars.
//   color:Color = Blue; // Enum.
//   weapons:[Weapon];   // Vector of tables.
//   equipped:Equipment; // Union.
//   path:[Vec3];        // Vector of structs.
// }
//
// table Weapon {
//   name:string;
//   damage:short;
// }
//
// root_type Monster;

namespace survival2d.flatbuffers;

struct Vec2 {
  x: double;
  y: double;
}

table Player {
  username: string;
  position: Vec2;
  rotation: double;
  team: int;
}

table Tree {
}

table Container {
}

table Stone {
}

table Wall {
}

//union Obstacle {
//  Tree,
//  Container,
//  Stone,
//  Wall
//}

enum GunType: byte {
  NORMAL
}

table GunItem {
  type: GunType;
  numBullet: int;
}

enum BulletType: byte {
  NORMAL
}

table BulletItem {
  type: BulletType;
  numBullet: int;
}

enum VestType: byte {
  LEVEL_0,
  LEVEL_1,
}

table VestItem {
  type: VestType;
}

enum HelmetType: byte {
  LEVEL_0,
  LEVEL_1,
}

table HelmetItem {
  type: HelmetType;
}

table BandageItem {
}

table MedKitItem {
}

enum BackPackType: byte {
  LEVEL_0,
  LEVEL_1,
  LEVEL_2,
}

table BackPackItem {
  type: BackPackType;
}

union Item {
  BulletItem,
  GunItem,
  VestItem,
  HelmetItem,
  BandageItem,
  MedKitItem,
}

union MapObjectData {
  //Item
  BulletItem,
  GunItem,
  VestItem,
  HelmetItem,
  BandageItem,
  MedKitItem,
  //Obstacle
  Tree,
  Container,
  Stone,
  Wall
}

table MapObject {
  id: int;
  position: Vec2;
  data: MapObjectData;
}

table Bullet {
  id: int;
  position: Vec2;
  type: BulletType;
  owner: string;
  direction: Vec2;
}

table MatchInfoRequest {
}

table MatchInfoResponse {
  players: [Player];
  mapObjects: [MapObject];
  safeZone: Vec2;
}

table PlayerMoveRequest {
  direction: Vec2;
  rotation: double;
}

table PlayerMoveResponse {
  username: string;
  position: Vec2;
  rotation: double;
}

table PlayerChangeWeaponRequest {
  slot: byte;
}

table PlayerChangeWeaponResponse {
  username: string;
  slot: byte;
}

table PlayerAttackRequest {
}

table PlayerAttackResponse {
  username:string;
  position:Vec2;
  slot:byte;
}

table PlayerDropItemRequest {
  id: int;
}

table PlayerDropItemResponse {
}

table CreateBulletOnMapResponse {
  bullet: Bullet;
}

table CreateItemOnMapResponse {
  id: int;
  item: Item;
  position: Vec2;
  rawPosition: Vec2;
}

table StartGameResponse {
}

table EndGameResponse {
  winTeam: int;
}

table BulletWithQuantity {
  type: BulletType;
  num: int;
}

table Hand {
}

table Gun {
  type: GunType;
  remainBullets: int;
}

union WeaponData {
  Hand,
  Gun
}

table Weapon {
  data: WeaponData;
}

table PlayerInfoResponse {
  hp: double;
  weapon: [Weapon];
  bullets: [BulletWithQuantity];
}

table ObstacleDestroyResponse {
  id: int;
}

table ObstacleTakeDamageResponse {
  id: int;
  remainHp: double;
}

table PlayerTakeDamageResponse {
  username: string;
  remainHp: double;
}

table PlayerDeadResponse {
  username: string;
}

table PlayerReloadWeaponRequest {
}

table PlayerReloadWeaponResponse {
  remainBulletsInGun: int;
  remainBullets: int;
}

table PlayerTakeItemRequest {
}

table PlayerTakeItemResponse {
  username: string;
  id: int; // id cá»§a map object
}

table NewSafeZoneResponse {
  safeZone: Vec2;
}

table SafeZoneMoveResponse {
}

table PingRequest {}

table PingResponse {}

table PingByPlayerMoveRequest {
  direction: Vec2;
  rotation: double;
}

table PingByPlayerMoveResponse {
  username: string;
  position: Vec2;
  rotation: double;
}

table PingByMatchInfoRequest {}

table PingByMatchInfoResponse {
  players: [Player];
  mapObjects: [MapObject];
  safeZone: Vec2;
}

union PacketData {
  MatchInfoRequest,
  MatchInfoResponse,
  PlayerMoveRequest,
  PlayerMoveResponse,
  PlayerAttackRequest,
  PlayerAttackResponse,
  PlayerInfoResponse,
  CreateBulletOnMapResponse,
  CreateItemOnMapResponse,
  ObstacleTakeDamageResponse,
  ObstacleDestroyResponse,
  PlayerTakeDamageResponse,
  PlayerDeadResponse,
  PlayerReloadWeaponRequest,
  PlayerReloadWeaponResponse,
  PlayerChangeWeaponRequest,
  PlayerChangeWeaponResponse,
  PlayerTakeItemRequest,
  PlayerTakeItemResponse,
  StartGameResponse,
  EndGameResponse,
  NewSafeZoneResponse,
  SafeZoneMoveResponse,
  PingRequest,
  PingResponse,
  PingByPlayerMoveRequest,
  PingByPlayerMoveResponse,
  PingByMatchInfoRequest,
  PingByMatchInfoResponse,
}

table Packet {
  data: PacketData;
}

root_type Packet;
