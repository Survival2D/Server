// automatically generated by the FlatBuffers compiler, do not modify

package survival2d.flatbuffers;

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.Table;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

@SuppressWarnings("unused")
public final class ObstacleTakeDamageResponse extends Table {
  public static void ValidateVersion() {
    Constants.FLATBUFFERS_1_12_0();
  }

  public static ObstacleTakeDamageResponse getRootAsObstacleTakeDamageResponse(ByteBuffer _bb) {
    return getRootAsObstacleTakeDamageResponse(_bb, new ObstacleTakeDamageResponse());
  }

  public static ObstacleTakeDamageResponse getRootAsObstacleTakeDamageResponse(
      ByteBuffer _bb, ObstacleTakeDamageResponse obj) {
    _bb.order(ByteOrder.LITTLE_ENDIAN);
    return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb));
  }

  public static int createObstacleTakeDamageResponse(
      FlatBufferBuilder builder, int id, double remainHp) {
    builder.startTable(2);
    ObstacleTakeDamageResponse.addRemainHp(builder, remainHp);
    ObstacleTakeDamageResponse.addId(builder, id);
    return ObstacleTakeDamageResponse.endObstacleTakeDamageResponse(builder);
  }

  public static void startObstacleTakeDamageResponse(FlatBufferBuilder builder) {
    builder.startTable(2);
  }

  public static void addId(FlatBufferBuilder builder, int id) {
    builder.addInt(0, id, 0);
  }

  public static void addRemainHp(FlatBufferBuilder builder, double remainHp) {
    builder.addDouble(1, remainHp, 0.0);
  }

  public static int endObstacleTakeDamageResponse(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }

  public void __init(int _i, ByteBuffer _bb) {
    __reset(_i, _bb);
  }

  public ObstacleTakeDamageResponse __assign(int _i, ByteBuffer _bb) {
    __init(_i, _bb);
    return this;
  }

  public int id() {
    int o = __offset(4);
    return o != 0 ? bb.getInt(o + bb_pos) : 0;
  }

  public double remainHp() {
    int o = __offset(6);
    return o != 0 ? bb.getDouble(o + bb_pos) : 0.0;
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) {
      __reset(_vector, _element_size, _bb);
      return this;
    }

    public ObstacleTakeDamageResponse get(int j) {
      return get(new ObstacleTakeDamageResponse(), j);
    }

    public ObstacleTakeDamageResponse get(ObstacleTakeDamageResponse obj, int j) {
      return obj.__assign(__indirect(__element(j), bb), bb);
    }
  }
}
