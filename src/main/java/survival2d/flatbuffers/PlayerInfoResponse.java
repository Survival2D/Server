// automatically generated by the FlatBuffers compiler, do not modify

package survival2d.flatbuffers;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@SuppressWarnings("unused")
public final class PlayerInfoResponse extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_1_12_0(); }
  public static PlayerInfoResponse getRootAsPlayerInfoResponse(ByteBuffer _bb) { return getRootAsPlayerInfoResponse(_bb, new PlayerInfoResponse()); }
  public static PlayerInfoResponse getRootAsPlayerInfoResponse(ByteBuffer _bb, PlayerInfoResponse obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public PlayerInfoResponse __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public double hp() { int o = __offset(4); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  public survival2d.flatbuffers.Weapon weapon(int j) { return weapon(new survival2d.flatbuffers.Weapon(), j); }
  public survival2d.flatbuffers.Weapon weapon(survival2d.flatbuffers.Weapon obj, int j) { int o = __offset(6); return o != 0 ? obj.__assign(__indirect(__vector(o) + j * 4), bb) : null; }
  public int weaponLength() { int o = __offset(6); return o != 0 ? __vector_len(o) : 0; }
  public survival2d.flatbuffers.Weapon.Vector weaponVector() { return weaponVector(new survival2d.flatbuffers.Weapon.Vector()); }
  public survival2d.flatbuffers.Weapon.Vector weaponVector(survival2d.flatbuffers.Weapon.Vector obj) { int o = __offset(6); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  public survival2d.flatbuffers.BulletWithQuantity bullets(int j) { return bullets(new survival2d.flatbuffers.BulletWithQuantity(), j); }
  public survival2d.flatbuffers.BulletWithQuantity bullets(survival2d.flatbuffers.BulletWithQuantity obj, int j) { int o = __offset(8); return o != 0 ? obj.__assign(__indirect(__vector(o) + j * 4), bb) : null; }
  public int bulletsLength() { int o = __offset(8); return o != 0 ? __vector_len(o) : 0; }
  public survival2d.flatbuffers.BulletWithQuantity.Vector bulletsVector() { return bulletsVector(new survival2d.flatbuffers.BulletWithQuantity.Vector()); }
  public survival2d.flatbuffers.BulletWithQuantity.Vector bulletsVector(survival2d.flatbuffers.BulletWithQuantity.Vector obj) { int o = __offset(8); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }

  public static int createPlayerInfoResponse(FlatBufferBuilder builder,
      double hp,
      int weaponOffset,
      int bulletsOffset) {
    builder.startTable(3);
    PlayerInfoResponse.addHp(builder, hp);
    PlayerInfoResponse.addBullets(builder, bulletsOffset);
    PlayerInfoResponse.addWeapon(builder, weaponOffset);
    return PlayerInfoResponse.endPlayerInfoResponse(builder);
  }

  public static void startPlayerInfoResponse(FlatBufferBuilder builder) { builder.startTable(3); }
  public static void addHp(FlatBufferBuilder builder, double hp) { builder.addDouble(0, hp, 0.0); }
  public static void addWeapon(FlatBufferBuilder builder, int weaponOffset) { builder.addOffset(1, weaponOffset, 0); }
  public static int createWeaponVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startWeaponVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addBullets(FlatBufferBuilder builder, int bulletsOffset) { builder.addOffset(2, bulletsOffset, 0); }
  public static int createBulletsVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startBulletsVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static int endPlayerInfoResponse(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public PlayerInfoResponse get(int j) { return get(new PlayerInfoResponse(), j); }
    public PlayerInfoResponse get(PlayerInfoResponse obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

